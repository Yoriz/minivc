#!/usr/local/bin/python2.7
from genericpath import  isfile, isdir
from pprint import pprint
from termcolor import colored
from os import getcwd, listdir, chdir
from os.path import dirname, join
from argh import command
import sys

notes_file = 'notes.py'
notes_name = notes_file.split('.')[0]
commands_file = 'app.py'
commands_var = 'commands'
controller_file = 'controller.py'
controller_dir = 'controller'
command_template = "@register_command({0}.{1})\ndef {1}(facade, note):\n    pass\n\n"

# todo if aborting half way through due to error, roll back changes.

@command
def scaffold(name):
    # todo implement me. super simple app. startup, and action notes. echos raw_input back with a "thankyou"
    pass

@command
def rmcmd(name):
    # todo implement me
    pass

@command
def lscmd():
    """list all commands"""
    chdir(get_root_path())
    assert isfile(notes_file)
    print '\ncommands:'
    with open(notes_file) as file:
        for line in file.readlines():
            if not line.strip():
                continue
            print ' ',line.split('=')[0]
    print ''

@command
def addcmd(name):
    """add a new controller and associated entries with given name"""
    name = name.lower()
    root = get_root_path()
    chdir(root)
    has_notes = isfile(notes_file)
    has_controller_file = isfile(controller_file)
    has_controller_dir = isdir(controller_dir)
    file_path = controller_file if has_controller_file else join(controller_dir, name + '_command.py')

    if not has_notes:
        error("couldn't find {0} in {1}.".format(notes_file, root))
    if not (has_controller_file or has_controller_dir):
        error("couldn't find {0} or dir {1} in {2}.".format(controller_file, controller_dir, root))
    if has_controller_file and has_controller_dir:
        error('you can have both a controller file and a controller dir.')

    msg = 'add {0} to {1} for note {2}? [y/n] '
    func = '{0}(facade, note)'.format(name)
    text = [colored(text, 'magenta') for text in (func, file_path, name)]
    if not 'y' is raw_input(msg.format(*text)):
        print 'you decided to abort.'
        sys.exit(0)

    update_notes_file(name)
    if has_controller_file:
        update_controller_file(name)
    elif has_controller_dir:
        add_new_command_file(file_path, name, root)
    print colored('success!','cyan')

def get_root_path():
    path = startpath = getcwd()
    for _ in range(10):
        if 'app.py' in listdir(path):
            return path
        path = dirname(path)
    error('app root not found. search 10 levels above: {0}'.format(startpath))

def update_notes_file(name):
    with open(notes_file, 'a') as file: # write notes file
        file.write("{0} = '{0}'\n".format(notes_name,name))

def update_controller_file(name):
    with open(controller_file, 'a') as file: # write controller file
        file.writelines(command_template.format(notes_name, name))

def add_new_command_file(file_path, name, root):
    path = join(root, file_path)
    with open(path, 'w') as file:
        file.write(command_template.format(name))

def error(msg):
    print '\nERROR\n\n', msg
    sys.exit(1)

if __name__ == '__main__':
    from nathants.util.shell import Parser
    msg = 'a tool to automate some of the (minimal) boilerplate with MiniVC'
    Parser([lscmd, addcmd], description=msg)


